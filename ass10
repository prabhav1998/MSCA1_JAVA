1)
A)
import java.awt.*;
import java.applet.*;
import java.awt.event.*;
public class KeyEventDemo extends Applet implements KeyListener
{
    String msg = "";
 
    public void init()
    {
        addKeyListener(this);
    }
 
    public void keyReleased(KeyEvent k)
    {
        showStatus("Key Released");
        repaint();
    }
 
    public void keyTyped(KeyEvent k)
    {
        showStatus("Key Typed");
        repaint();
    }
 
    public void keyPressed(KeyEvent k)
    {
        showStatus("Key Pressed");
        repaint();
    }
 
    public void paint(Graphics g)
    {
        g.drawString(msg, 10, 10);
    }
}
?
/* 
   <applet code="KeyEventDemo" height="400" width="400">
   </applet>
*/

B)
import java.awt.*;
import java.applet.*;
import java.awt.event.*;
 
public class KeyEventDemo extends Applet implements KeyListener
{
    String msg = "";
 
    public void init()
    {
        addKeyListener(this);
    }
 
    public void keyPressed(KeyEvent k)
    {
        int key = k.getKeyCode();
 
        switch(key)
        {
            case KeyEvent.VK_F1:
                msg = msg + "F1 ";
                break;
            case KeyEvent.VK_F2:
                msg = msg + "F2 ";
                break;
            case KeyEvent.VK_F3:
                msg = msg + "F3 ";
                break;
            case KeyEvent.VK_F4:
                msg = msg + "F4 ";
                break;
            case KeyEvent.VK_RIGHT:
                msg = msg + "RIGHT ";
                break;
            case KeyEvent.VK_LEFT:
                msg = msg + "LEFT ";
                break;
            case KeyEvent.VK_UP:
                msg = msg + "UP ";
                break;
             
            case KeyEvent.VK_DOWN:
                msg = msg + "DOWN ";
                break;
 
        }
 
        repaint();
    }
 
    public void keyReleased(KeyEvent k){}
 
    public void keyTyped(KeyEvent k){}
 
    public void paint(Graphics g)
    {
        g.drawString(msg, 10, 10);
    }
}
?
 
?
/* 
   <applet code="KeyEventDemo" height=400 width=400>
   </applet>
*/

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3)
A)
// Java program to handle MouseListener events
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
class Mouse extends Frame implements MouseListener {

	// Jlabels to display the actions of events of mouseListener
	// static JLabel label1, label2, label3;

	// default constructor
	Mouse()
	{
	}

	// main class
	public static void main(String[] args)
	{
		// create a frame
		JFrame f = new JFrame("MouseListener");

		// set the size of the frame
		f.setSize(600, 100);

		// close the frame when close button is pressed
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// create anew panel
		JPanel p = new JPanel();

		// set the layout of the panel
		p.setLayout(new FlowLayout());

		// initialize the labels
		label1 = new JLabel("no event ");

		label2 = new JLabel("no event ");

		label3 = new JLabel("no event ");

		// create an object of mouse class
		Mouse m = new Mouse();

		// add mouseListener to the frame
		f.addMouseListener(m);

		// add labels to the panel
		p.add(label1);
		p.add(label2);
		p.add(label3);

		// add panel to the frame
		f.add(p);

		f.show();
	}

	// getX() and getY() functions return the
	// x and y coordinates of the current
	// mouse position
	// getClickCount() returns the number of
	// quick consecutive clicks made by the user

	// this function is invoked when the mouse is pressed
	public void mousePressed(MouseEvent e)
	{

		// show the point where the user pressed the mouse
		label1.setText("mouse pressed at point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse is released
	public void mouseReleased(MouseEvent e)
	{

		// show the point where the user released the mouse click
		label1.setText("mouse released at point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse exits the component
	public void mouseExited(MouseEvent e)
	{

		// show the point through which the mouse exited the frame
		label2.setText("mouse exited through point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse enters the component
	public void mouseEntered(MouseEvent e)
	{

		// show the point through which the mouse entered the frame
		label2.setText("mouse entered at point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse is pressed or released
	public void mouseClicked(MouseEvent e)
	{

		// getClickCount gives the number of quick,
		// consecutive clicks made by the user
		// show the point where the mouse is i.e
		// the x and y coordinates
		label3.setText("mouse clicked at point:"
					+ e.getX() + " "
					+ e.getY() + "mouse clicked :" + e.getClickCount());
	}
}

B)
// Java program to illustrate MouseListener
// and MouseMotionListener events
// simultaneously

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
class Mouse extends Frame implements MouseMotionListener, MouseListener {

	// Jlabels to display the actions of events of MouseMotionListener and MouseListener
	static JLabel label1, label2, label3, label4, label5;

	// default constructor
	Mouse()
	{
	}

	// main class
	public static void main(String[] args)
	{
		// create a frame
		JFrame f = new JFrame("MouseListener and MouseMotionListener");

		// set the size of the frame
		f.setSize(900, 300);

		// close the frame when close button is pressed
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// create anew panel
		JPanel p = new JPanel();
		JPanel p1 = new JPanel();

		// set the layout of the frame
		f.setLayout(new FlowLayout());

		JLabel l1, l2;

		l1 = new JLabel("MouseMotionListener events :");

		l2 = new JLabel("MouseLIstener events :");

		// initialize the labels
		label1 = new JLabel("no event ");

		label2 = new JLabel("no event ");

		label3 = new JLabel("no event ");

		label4 = new JLabel("no event ");

		label5 = new JLabel("no event ");

		// create an object of mouse class
		Mouse m = new Mouse();

		// add mouseListener and MouseMotionListenerto the frame
		f.addMouseMotionListener(m);
		f.addMouseListener(m);

		// add labels to the panel
		p.add(l1);
		p.add(label1);
		p.add(label2);
		p1.add(l2);
		p1.add(label3);
		p1.add(label4);
		p1.add(label5);

		// add panel to the frame
		f.add(p);
		f.add(p1);

		f.show();
	}

	// getX() and getY() functions return the
	// x and y coordinates of the current
	// mouse position
	// getClickCount() returns the number of
	// quick consecutive clicks made by the user

	// MouseMotionListener events

	// invoked when mouse button is pressed
	// and dragged from one point to another
	// in a component
	public void mouseDragged(MouseEvent e)
	{
		// update the label to show the point
		// through which point mouse is dragged
		label1.setText("mouse is dragged through point "
					+ e.getX() + " " + e.getY());
	}

	// invoked when the cursor is moved from
	// one point to another within the component
	public void mouseMoved(MouseEvent e)
	{
		// update the label to show the point to which the cursor moved
		label2.setText("mouse is moved to point "
					+ e.getX() + " " + e.getY());
	}

	// MouseListener events

	// this function is invoked when the mouse is pressed
	public void mousePressed(MouseEvent e)
	{

		// show the point where the user pressed the mouse
		label3.setText("mouse pressed at point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse is released
	public void mouseReleased(MouseEvent e)
	{

		// show the point where the user released the mouse click
		label3.setText("mouse released at point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse exits the component
	public void mouseExited(MouseEvent e)
	{

		// show the point through which the mouse exited the frame
		label4.setText("mouse exited through point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse enters the component
	public void mouseEntered(MouseEvent e)
	{

		// show the point through which the mouse entered the frame
		label4.setText("mouse entered at point:"
					+ e.getX() + " " + e.getY());
	}

	// this function is invoked when the mouse is pressed or released
	public void mouseClicked(MouseEvent e)
	{

		// getClickCount gives the number of quick,
		// consecutive clicks made by the user
		// show the point where the mouse is i.e
		// the x and y coordinates
		label5.setText("mouse clicked at point:"
					+ e.getX() + " "
					+ e.getY() + "mouse clicked :" + e.getClickCount());
	}
}

C)
//Program of an applet which
//displays x and y co-ordinate
//in it's status bar,whenever
//the user click anywhere in
//the applet window.


import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class GFG extends Applet implements MouseListener
{
public void init()
{
this.addMouseListener (this);
//first "this" represent source
//(in this case it is applet which
//is current calling object) and
//second "this" represent
//listener(in this case it is GFG)
}
public void mouseClicked(MouseEvent m)
{
int x = m.getX();
int y = m.getY();
String str = "x =" +x+",y = "+y;
showStatus(str);
}

	@Override
	public void mousePressed(MouseEvent e) {
		
}

	@Override
	public void mouseReleased(MouseEvent e) {
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		
	}
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
